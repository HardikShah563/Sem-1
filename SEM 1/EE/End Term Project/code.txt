//Libraries

#include <Wire.h>
#include <Adafruit Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <Adafruit BMP085.h>
#include <LiquidCryslal 120.h>

//Sensors Pins Declaration

#define DHTPIN 2
#define soil_pin A0
#define gas_pin Al
#define idr_pin A2
#define valve 3

#define DHTTYPE     DHT11      // DHT 11

//Initialize sensor's object

DHT_Unified dht (DHTPIN, DHTTYPE);
Adafruit BMP085 bmp;

LiquidCrystal_I2C lcd (0x20, 20, 4);
// set the LCD address to 0 x 27 for a 16 chars and 2 line display

//Declare data variables

int soil_value;
int gas_value;
int 1dr_value;
uint_32 delayMS;

void setup()
{
   Serial.begin(9600);
   //Initialize Serial monitor

   Serial.println("Smart Irrigation System by Arduino UNO");
   pinMode (valve, OUTPUT);

   lcd.init();
   //Initialize LCD Display

   lcd.backlight ();
   //Enables Backlight

//Prints Company name on the screen
lcd.setCursor(0,0);
lcd.print("Smart Irrigation");

lcd.setCursor(0,1);
lcd.print ("System");

lcd.setCursor (0, 2);
lcd.print("The Engineering");

lcd.setCursor(0,3);
lcd.print("Projects") ;

dht.begin();
//Initialize DHT11 sensor


//Initialize BMP180 sensor
if (!bmp.begin())
    {
      Serial.println("Could not find a valid BMP085 sensor, check wiring!");
      while (1) {}
    }
    else
       {
         Serial.println("Pressure Sensor Initialized");
       }
Serial.println (F("DHT11 Begin"));


// Print DHT 11 temp sensor details.
sensor_t sensor;
dht. temperature ().getSensor (&sensor);

Serial.println (F("-----------------------------------------------------------------------------"));
Serial.println (F("Temperature Sensor"));

Serial.print   (F("Sensor Type: "));
Serial.println (sensor.name);

Serial.print   (F("Driver Ver: "));
Serial.println (sensor.versic);

Serial.print   (F("Unique ID: "));
Serial.println (sensor.sensor_id);

Serial.print   (F ("Max Value: "));
Serial.print   (sensor.max_value);
Serial.println (F("째C"));

Serial.print   (F ("Min Value: "));
Serial.print   (sensor.min_value);
Serial.println (F("째C"));

Serial.print   (F("Resolution: "));
Serial.print   (sensor.resolution);
Serial.println (F("째C"));

Serial.println (F("-----------------------------------------------------------------------------"));
Serial.println (F("


// Print DHT11 humidity sensor details.
dht.humidity ().getSensor (&sensor);
Serial.println  (F("Humidity Sensor"));

Serial.print    (F("Sensor Type: "));
Serial.printin  (sensor.name);

Serial.print    (F("Driver Ver: "));
Serial.println  (sensor, version);

Serial.print    (F("Unique ID: "));
Serial.println  (sensor.sensor_id);

Serial.print    (F("Max Value: "));
Serial.print    (sensor.max_value);
Serial.println  (F(""));

Serial.print    (F("Min Value: "));
Serial.print    (sensor.min value);
Serial.println  (F(""));

Serial.print    (F("Resolution: "));
Serial.print    (sensor.resolution);
Serial.println  (F("%"));

Serial.println (F("-----------------------------------------------------------------------------"));

// We're ready to go!

Serial.println(" ");
delayMS = sensor.min_delay / 1000;
lcd.clear();

}

void loop()
{
  // Delay between measurements.
  delay (delayMS);

  // Get temperature event and print its value

  sensors_event_t event;
  dht. temperature ().getEvent (sevent);

  if (isnan (event. temperature))
    {
        Serial.printin (F("Error reading temperature! "));
    }

    else
       {
         Serial.print (F("Temperature: "));
         Serial.print (event. temperature);
         Serial.println (F(" degree C"));
       }
Serial.println (F(""C"));


// Get humidity event and print its value

dht.humidity ().getEvent (sevent);

if (isnan (event. relative_humidity))
     {
        Serial.println (F("Error reading humidity!"));
        else
        {
            Serial.print (F("Humidity: "));
            Serialprint (event.relative humidity);
            Serial.println (F(""));
        }
     }

// Pressure sensor readings

Serial.print("Pressure = ");
Serial.print (bmp.readPressure());
Serial.println(" Pa ");

//Soil Moisture Sensor

soil_value = analogRead (soil_pin);
soil_value = map (soil_value, 0, 1023, 0, 100);

Serial.print   ("Moisture : ");
Serial.print   (soil_value);
Serial.println ("%");

//Condition for water valve controlling

if (soil_value<25)
    {
      digitalWrite (valve, HIGH);
    }
    else
    {
      digitalWrite (valve, LOW);
    }


//Gas Sensor

gas_value = analogRead (gas_pin);
gas_value = map (gas_value, 0,1023, 100, 0);

Serial.print("Air Quality : ");
Serial.print (gas_value);
Serial.println("%");


//LDR

1dr_value-analogRead(ldr_pin);
1dr_value = map (1dr_value, 0, 1023, 0, 100);

Serial.print ("Light Intensity :");
Serial.print (ldr_value);
Serial.println("%");

Serial.println();
Serial.println("-----------------------------------------------------------------------------");
Serial.println();


//LCD Display
lcd.setCursor(0,0);

lcd.print("T: ");
lcd.print (event. temperature);

lcd.print("째C H: ");
lcd.print (event.relative_humidity);
lcd.print("%");

lcd.setCursor(0,1);

lcd.print ("P: ");
lcd.print (bmp.read Pressure());

lcd.print(" Pa AQ: ");
lcd.print (gas_value);
lcd.print("%");

lcd.setCursor(0, 2);

lcd.print("Soil Moisture: ");
lcd.print (soil_value);
lcd.print("%");

lcd.setCursor(0,3);

lcd.print("Light Intensity: ");
lcd.print (ldr_value);

lcd.setCursor(0, 2);

lcd.print ("Soil Moisture: ");
lcd.print (soil_value);
lcd.print("%");

lcd.setCursor (0,3);

lcd.print("Light Intensity: ");
lcd.print (ldr_value);
lcd.print("%");

}
